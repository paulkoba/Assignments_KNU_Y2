{"id":465243132,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1615230063,"status_display":"Accepted","runtime":"960 ms","url":"/submissions/detail/465243132/","is_pending":"Not Pending","title":"Snakes and Ladders","memory":"13.4 MB","code":"class Solution {\npublic:\n    int snakesAndLadders(vector<vector<int>>& board) {\n        bool flag = true;\n        vector<int> linearBoard;\n        for(auto j = board.rbegin(); j != board.rend(); ++j) {\n            auto i = *j;\n            if(flag) {\n                 linearBoard.insert(linearBoard.end(), i.begin(), i.end());\n            } else {\n                 linearBoard.insert(linearBoard.end(), i.rbegin(), i.rend());\n            }\n            flag = !flag;\n        }\n                \n        vector<int> dp(linearBoard.size(), numeric_limits<int>::max() / 2);\n        dp[0] = 0;\n        \n        for(int i = 0; i < dp.size(); ++i) {\n            for(int j = 0; j < dp.size(); ++j) {\n                for(int k = 1; k <= 6; ++k) {\n                    if(j + k >= dp.size()) break;\n                    if(linearBoard[j + k] != -1) {\n                        dp[linearBoard[j + k] - 1] = min(dp[j] + 1, dp[linearBoard[j + k] - 1]);\n                    } else {\n                        dp[j + k] = min(dp[j + k], dp[j] + 1);\n                    }\n                }\n            }\n        }\n        \n        return dp[dp.size() - 1] > numeric_limits<int>::max() / 3 ? -1 : dp[dp.size() - 1];\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"snakes-and-ladders"}
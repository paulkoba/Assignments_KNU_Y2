{"id":517169222,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1625388357,"status_display":"Accepted","runtime":"416 ms","url":"/submissions/detail/517169222/","is_pending":"Not Pending","title":"Count Vowels Permutation","memory":"104.1 MB","code":"struct pair_hash {\n    template <class T1, class T2>\n    std::size_t operator () (const std::pair<T1,T2> &p) const {\n        auto h1 = std::hash<T1>{}(p.first);\n        auto h2 = std::hash<T2>{}(p.second);\n\n        // Mainly for demonstration purposes, i.e. works but is overly simple\n        // In the real world, use sth. like boost.hash_combine\n        return h1 ^ h2;  \n    }\n};\n\nclass Solution {\npublic:\n    unordered_map<pair<int, char>, int64_t, pair_hash> memo;\n    \n    int64_t countVowelPermutation(int n, char prev) {\n        if(n == 0) return 1;\n        if(memo.find({n, prev}) != memo.end()) return memo[{n, prev}];\n        \n        switch(prev) {\n            case ' ':\n                return memo[{n, prev}] = (countVowelPermutation(n - 1, 'a') + \n                    countVowelPermutation(n - 1, 'e') +\n                    countVowelPermutation(n - 1, 'i') + \n                    countVowelPermutation(n - 1, 'o') +\n                    countVowelPermutation(n - 1, 'u')) % (1000000007);\n            case 'a':\n                return memo[{n, prev}] = countVowelPermutation(n - 1, 'e');               \n            case 'e':\n                return memo[{n, prev}] = (countVowelPermutation(n - 1, 'a') + \n                    countVowelPermutation(n - 1, 'i')) % (1000000007);                \n            case 'i':\n                return memo[{n, prev}] = (countVowelPermutation(n - 1, 'a') + \n                    countVowelPermutation(n - 1, 'e') +\n                    countVowelPermutation(n - 1, 'o') +\n                    countVowelPermutation(n - 1, 'u')) % (1000000007);\n            case 'o':\n                return memo[{n, prev}] = (countVowelPermutation(n - 1, 'i') + \n                    countVowelPermutation(n - 1, 'u')) % (1000000007);\n            case 'u':\n                return memo[{n, prev}] = countVowelPermutation(n - 1, 'a');\n            default:\n                return numeric_limits<int>::min();\n        }\n    }\n    \n    int countVowelPermutation(int n) {\n        return countVowelPermutation(n, ' ');\n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"count-vowels-permutation"}
{"id":455901021,"lang":"cpp","time":"7 months, 1 week","timestamp":1613298501,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/455901021/","is_pending":"Not Pending","title":"Sum of Distances in Tree","memory":"N/A","code":"class Solution {\npublic:\n    std::vector<int> sumOfDistancesInTree(int N, std::vector<std::vector<int>>& edges) {        \n        std::vector<int> output;\n        \n        std::vector<std::vector<int>> nodes(N, std::vector<int>());\n        \n        for(const auto& edge : edges) {\n            nodes[edge[0]].push_back(edge[1]);\n            nodes[edge[1]].push_back(edge[0]);\n        }\n        \n        for(int i = 0; i < N; ++i) {\n            std::vector<int> distances(N, 0);\n            std::vector<bool> visited(N, 0);\n\n            std::queue<int> bfs;\n            bfs.push(i);   \n            visited[i] = true;\n            \n            while(!bfs.empty()) {\n                int node = bfs.front();\n                bfs.pop();\n                \n                for(int i : nodes[node]) {\n                    if(visited[i]) continue;\n                    visited[i] = true;\n                    distances[i] = distances[node] + 1;\n                    bfs.push(i);\n                }\n            }\n            \n            output.push_back(std::accumulate(distances.begin(), distances.end(), 0));\n        }\n        \n        return output;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"sum-of-distances-in-tree"}
{"id":524835341,"lang":"cpp","time":"2Â months","timestamp":1626679223,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/524835341/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"30.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    void dfs(TreeNode* root, unordered_map<TreeNode*, TreeNode*>& parents) {\n        if(!root) return;\n        dfs(root->left, parents);\n        dfs(root->right, parents);\n        \n        if(root->left) parents[root->left] = root;\n        if(root->right) parents[root->right] = root;\n    }\n    \n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        unordered_map<TreeNode*, TreeNode*> parents;\n        dfs(root, parents);\n        \n        set<TreeNode*> seen;\n        \n        while(p) {\n            seen.insert(p);\n            p = parents[p];\n        }\n        \n        while(q) {\n            if(seen.find(q) != seen.end()) return q;\n            q = parents[q];\n        }\n        \n        return nullptr;\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}
{"id":462200989,"lang":"cpp","time":"6Â months, 3Â weeks","timestamp":1614619476,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/462200989/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* prev = nullptr;\n        ListNode* output = new ListNode(0, nullptr);\n        ListNode* current = output;\n        while(l1 && l2) {\n            prev = current;\n            current->val += l1->val + l2->val;\n            \n            if(current->val >= 10) {\n                current->next = new ListNode(1);\n                current->val = current->val - 10;\n            }\n            \n            l1 = l1->next;\n            l2 = l2->next;\n            \n            if(!current->next) {\n                current->next = new ListNode(0);\n            }\n            \n            current = current->next;\n        }\n        \n        while(l1) {\n            prev = current;\n            current->val += l1->val;\n            \n            if(current->val >= 10) {\n                current->next = new ListNode(1);\n                current->val = current->val - 10;\n            }\n            \n            l1 = l1->next;\n            \n            if(!current->next) {\n                current->next = new ListNode(0);\n            }\n            \n            current = current->next;\n        }\n           \n        while(l2) {\n            prev = current;\n            current->val += l2->val;\n            \n            if(current->val >= 10) {\n                current->next = new ListNode(1, nullptr);\n                current->val = current->val - 10;\n            }\n            \n            l1 = l1->next;\n            \n            if(!current->next) {\n                current->next = new ListNode(0);\n            }\n            \n            current = current->next;\n        }\n        \n        if(current->val == 0) {\n            prev->next = 0;\n            delete current;\n        }\n        \n        return output;\n    }\n};","compare_resulttitle_slug":"add-two-numbers"}
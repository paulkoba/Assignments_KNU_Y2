{"id":462195627,"lang":"cpp","time":"6 months, 3 weeks","timestamp":1614618604,"status_display":"Accepted","runtime":"100 ms","url":"/submissions/detail/462195627/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"47 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* balanceBST(vector<TreeNode*>& v, int i, int j) {\n        if(j < i) return nullptr;\n        \n        v[(i + j) / 2]->left = balanceBST(v, i, (i + j) / 2 - 1);\n        v[(i + j) / 2]->right = balanceBST(v, (i + j) / 2 + 1, j);\n        \n        return v[(i + j) / 2];\n    }\n    \n    void toVec(vector<TreeNode*>& v, TreeNode* root) {\n        if(!root) return;\n        \n        toVec(v, root->left);\n        v.push_back(root);\n        toVec(v, root->right);\n    }\n    \n    TreeNode* balanceBST(TreeNode* root) {\n        vector<TreeNode*> arr;\n        \n        toVec(arr, root);\n        \n        return balanceBST(arr, 0, arr.size() - 1);\n    }\n};","compare_result":"1111111111111111","title_slug":"balance-a-binary-search-tree"}
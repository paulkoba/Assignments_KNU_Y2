{"id":548463491,"lang":"cpp","time":"2 weeks, 3 days","timestamp":1630602966,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/548463491/","is_pending":"Not Pending","title":"Unique Binary Search Trees II","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void incRecursive(TreeNode* root, int n) {\n        if(!root) return;\n        root->val += n;\n        \n        incRecursive(root->left, n);\n        incRecursive(root->right, n);\n    }\n    \n    vector<TreeNode*> generateTrees(int n) {\n        if(n == 1) return { new TreeNode(1) };\n        if(n == 0) return { nullptr };\n        \n        vector<TreeNode*> output;\n        \n        for(int i = 1; i <= n; ++i) {\n            auto r1 = generateTrees(i - 1);\n            auto r2 = generateTrees(n - i);\n            for(const auto& p : r2) incRecursive(p, i);\n            \n            for(const auto& el1 : r1) {\n                for(const auto& el2 : r2) {\n                    output.push_back(new TreeNode(i, el1, el2));\n                }\n            }\n        }\n        \n        return output;\n    }\n};","compare_result":"11110000","title_slug":"unique-binary-search-trees-ii"}
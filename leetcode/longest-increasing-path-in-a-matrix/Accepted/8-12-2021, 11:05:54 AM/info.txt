{"id":537266328,"lang":"cpp","time":"1 month, 1 week","timestamp":1628755554,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/537266328/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"16 MB","code":"class Solution {\npublic:\n    int dfs(vector<vector<int>>& memo, vector<vector<int>>& matrix, int val, int i, int j) {\n        if(i < 0 || j < 0) return numeric_limits<int>::min();\n        if(i == matrix.size() || j == matrix[0].size()) return numeric_limits<int>::min();\n        if(matrix[i][j] <= val) return numeric_limits<int>::min();\n        if(memo[i][j] != -1) return memo[i][j];\n        \n        memo[i][j] = numeric_limits<int>::min();\n        \n        int m = 1;\n        m = max(dfs(memo, matrix, matrix[i][j], i + 1, j) + 1, m);\n        m = max(dfs(memo, matrix, matrix[i][j], i - 1, j) + 1, m);\n        m = max(dfs(memo, matrix, matrix[i][j], i, j - 1) + 1, m);\n        m = max(dfs(memo, matrix, matrix[i][j], i, j + 1) + 1, m);\n        return memo[i][j] = m;\n    }\n    \n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        \n        vector<vector<int>> memo(m, vector<int>(n, -1));\n        int output = -1;\n        \n        for(int i = 0; i < m; ++i) {\n            for(int j = 0; j < n; ++j) {\n                if(memo[i][j] != -1) continue;\n                output = max(dfs(memo, matrix, -100, i, j), output);\n            }\n        }\n        \n        return output;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}
{"id":458312490,"lang":"cpp","time":"7Â months","timestamp":1613815620,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/458312490/","is_pending":"Not Pending","title":"Find Largest Value in Each Tree Row","memory":"22.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    void dfs(TreeNode* root, int depth, vector<int>& output) {\n        if(!root) return;\n        \n        if(output.size() <= depth) {\n            output.push_back(root->val);\n        } else {\n            output[depth] = max(output[depth], root->val);\n        }\n        \n        dfs(root->left, depth + 1, output);\n        dfs(root->right, depth + 1, output);\n    }\n    \npublic:\n    vector<int> largestValues(TreeNode* root) {\n        vector<int> output;\n        dfs(root, 0, output);\n        \n        return output;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-largest-value-in-each-tree-row"}
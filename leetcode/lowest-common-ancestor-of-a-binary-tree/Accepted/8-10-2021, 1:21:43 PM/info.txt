{"id":536232174,"lang":"cpp","time":"1 month, 1 week","timestamp":1628590903,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/536232174/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"17.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<TreeNode*, TreeNode*> parent;\n    \n    void dfs(TreeNode* root) {\n        if(!root) return;\n        \n        parent[root->left] = root;\n        parent[root->right] = root;\n        \n        dfs(root->left);\n        dfs(root->right);\n    }\n    \n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        dfs(root);\n        \n        set<TreeNode*> parents;\n    \n        while(p) {\n            parents.insert(p);\n            p = parent[p];\n        }\n        \n        while(q) {\n            if(parents.find(q) != parents.end()) return q;\n            q = parent[q];\n        }\n        \n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}
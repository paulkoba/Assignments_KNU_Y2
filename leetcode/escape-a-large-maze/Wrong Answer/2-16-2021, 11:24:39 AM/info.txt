{"id":456720651,"lang":"cpp","time":"7Â months","timestamp":1613467479,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/456720651/","is_pending":"Not Pending","title":"Escape a Large Maze","memory":"N/A","code":"class Solution {\n      \n    struct vhash {\n        size_t operator()(const std::vector<int>& v) const {\n            std::hash<int> hasher;\n            size_t seed = 0;\n            for (int i : v) {\n                seed ^= hasher(i) + 0x9e3779b9 + (seed<<6) + (seed>>2);\n            }\n            return seed;\n        }\n    };\n    \n    void dfs(vector<vector<int>>& blocked, vector<int> source, vector<int>& target, unordered_set<vector<int>, vhash>& visited, int& output) {\n        if(output > 200) return;\n        if(source[0] < 0 || source[0] > 999999 || source[1] < 0 || source[1] > 999999) return;\n        if(visited.find(source) != visited.end()) return;\n        if(binary_search(blocked.begin(), blocked.end(), source)) return;\n        if(source == target) {\n            output = 100500;\n            return;\n        }\n        \n        visited.insert(source);\n        ++output;\n        \n        dfs(blocked, {source[0] + 1, source[1]}, target, visited, output);\n        dfs(blocked, {source[0] - 1, source[1]}, target, visited, output);\n        dfs(blocked, {source[0], source[1] - 1}, target, visited, output);\n        dfs(blocked, {source[0], source[1] + 1}, target, visited, output);\n    }\n    \npublic:\n    bool isEscapePossible(vector<vector<int>>& blocked, vector<int>& source, vector<int>& target) {\n        unordered_set<vector<int>, vhash> visited;\n        sort(blocked.begin(), blocked.end());\n        int output = 0;\n        dfs(blocked, source, target, visited, output);\n        int output2 = 0;\n        dfs(blocked, target, source, visited, output2);\n        return output > 200 && output2 > 200;\n    }\n};","compare_result":"1111111111111101010101100111011","title_slug":"escape-a-large-maze"}
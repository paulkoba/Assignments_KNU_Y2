{"id":541136155,"lang":"cpp","time":"1Â month","timestamp":1629409210,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/541136155/","is_pending":"Not Pending","title":"Maximum Product of Splitted Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findSum(TreeNode* root, vector<int>& sum) {\n        if(!root) return 0;\n        \n        int a = findSum(root->left, sum);\n        int b = findSum(root->right, sum);\n        int c = a + b + root->val;\n        sum.push_back(c);\n        \n        return c;\n    }\n    \n    \n    \n    int maxProduct(TreeNode* root) {\n        vector<int> rr;\n        int r1 = findSum(root, rr);\n        int result = 0;\n        \n        for(int i = 0; i < rr.size(); ++i) {\n            result = max(result, (r1 - rr[i]) * rr[i]);\n        }\n        \n        return result;\n    }\n};","compare_result":"111111111111111111111111111111110000000000000000000000","title_slug":"maximum-product-of-splitted-binary-tree"}
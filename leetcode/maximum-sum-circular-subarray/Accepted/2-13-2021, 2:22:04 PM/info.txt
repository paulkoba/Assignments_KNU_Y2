{"id":455501607,"lang":"cpp","time":"7 months, 1 week","timestamp":1613218924,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/455501607/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"39.8 MB","code":"class Solution {\npublic:\n    int maxSubarraySumCircular(vector<int>& A) {\n        int currentBest = std::numeric_limits<int>::min();\n        \n        int currentSumMax = std::numeric_limits<int>::min() / 2;\n        int currentSumMin = std::numeric_limits<int>::max() / 2;\n        \n        bool hintFullArray = true;\n        \n        int totalSum = accumulate(A.begin(), A.end(), 0);\n        for(int i = 0; i < A.size(); ++i) {\n            if(A[i] > 0) hintFullArray = false;\n            \n            currentSumMax = max(A[i] + currentSumMax, A[i]);\n            currentSumMin = min(A[i] + currentSumMin, A[i]);\n            \n            currentBest = max(currentBest, currentSumMax);\n            \n            if(!hintFullArray || i != A.size() - 1)\n                currentBest = max(currentBest, totalSum - currentSumMin);\n        }\n        \n        return currentBest;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-circular-subarray"}
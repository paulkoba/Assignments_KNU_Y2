{"id":455502400,"lang":"cpp","time":"7 months, 1 week","timestamp":1613219172,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/455502400/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"39.9 MB","code":"class Solution {\npublic:\n    int maxSubarraySumCircular(vector<int>& A) {\n        bool flag = true;\n        for(int i : A) {\n            if(i >= 0) {\n                flag = false;\n                break;\n            }\n        }\n        if(flag) return *std::max_element(A.begin(), A.end());\n        \n        \n        int currentBest = 0;\n        \n        int currentSumMax = 0;\n        int currentSumMin = std::numeric_limits<int>::max() / 2;\n        \n        bool hintFullArray = true;\n        \n        int totalSum = accumulate(A.begin(), A.end(), 0);\n        \n        for(int i = 0; i < A.size(); ++i) {\n            currentSumMax = max(A[i] + currentSumMax, A[i]);\n            currentSumMin = min(A[i] + currentSumMin, A[i]);\n            \n            currentBest = max(currentBest, currentSumMax);\n            currentBest = max(currentBest, totalSum - currentSumMin);\n        }\n        \n        return currentBest;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-circular-subarray"}
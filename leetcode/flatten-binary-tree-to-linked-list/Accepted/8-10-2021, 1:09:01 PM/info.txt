{"id":536228424,"lang":"cpp","time":"1 month, 1 week","timestamp":1628590141,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/536228424/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"13.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void flatten(TreeNode* root, vector<TreeNode*>& ll) {\n        if(!root) return;\n        \n        ll.push_back(root);\n        flatten(root->left, ll);\n        flatten(root->right, ll);\n    }\n    \n    void flatten(TreeNode* root) {\n        if(!root) return;\n        \n        vector<TreeNode*> ll;\n        flatten(root, ll);\n        \n        int sz = ll.size();\n        \n        for(int i = 0; i < sz - 1; ++i) {\n            ll[i]->left = nullptr;\n            ll[i]->right = ll[i + 1];\n        }\n        ll[sz - 1]->left = nullptr;\n        ll[sz - 1]->right = nullptr;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list"}
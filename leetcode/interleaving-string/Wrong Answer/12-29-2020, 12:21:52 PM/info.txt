{"id":435941265,"lang":"cpp","time":"8 months, 3 weeks","timestamp":1609237312,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/435941265/","is_pending":"Not Pending","title":"Interleaving String","memory":"N/A","code":"class Solution {\n    \n    struct pair_hash\n    {\n        template <class T1, class T2>\n        std::size_t operator() (const std::pair<T1, T2> &pair) const\n        {\n            return std::hash<T1>()(pair.first) ^ std::hash<T2>()(pair.second);\n        }\n    };\n    \n    unordered_map<pair<size_t, size_t>, bool, pair_hash> result;\n    \npublic:\n    bool isInterleave(string s1, string s2, string s3, size_t i1 = 0, size_t i2 = 0, size_t i3 = 0) {\n        size_t idx1 = i1, idx2 = i2;\n\n        if(s1.size() + s2.size() != s3.size()) return false;\n        \n        if(result.find(make_pair(i1, i2)) != result.end()) return result[make_pair(i1, i2)];\n        \n        for(size_t i = i3; i < s3.size(); ++i) {\n            if(s1[idx1] == s3[i] && s2[idx2] != s3[i]) {\n                idx1++;\n                continue;\n            }\n            \n            if(s1[idx1] != s3[i] && s2[idx2] == s3[i]) {\n                idx2++;\n                continue;\n            }\n            \n            if(s1[idx1] != s3[i] && s2[idx2] != s3[i]) {\n                return result[make_pair(i1, i2)] = false;\n            }\n            \n            bool res = isInterleave(s1, s2, s3, i1 + 1, i2, i3 + 1);\n            if(res) return result[make_pair(i1 + 1, i2)] = res;\n            res = isInterleave(s1, s2, s3, i1 + 1, i2, i3 + 1);\n            return result[make_pair(i1 + 1, i2)] = res;\n        }\n                \n        return true;\n    }\n};","compare_result":"01111111111111100101111111111110110010111000000101011111001101111101101011101111110111110011001110111","title_slug":"interleaving-string"}
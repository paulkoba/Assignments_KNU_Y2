{"id":455893508,"lang":"cpp","time":"7 months, 1 week","timestamp":1613296404,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/455893508/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> rightSideView(TreeNode* root) {\n        queue<pair<TreeNode*, int>> bfs;\n        bfs.push({root, 0});\n        vector<int> output;\n        \n        while(!bfs.empty()) {\n            auto front = bfs.front();\n            bfs.pop();\n            \n            if(output.size() > front.second) {\n                output[front.second] = front.first->val;\n            } else {\n                output.push_back(front.first->val);\n            }\n            \n            if(front.first->left) bfs.push({front.first->left, front.second + 1});\n            if(front.first->right) bfs.push({front.first->right, front.second + 1});\n        }\n        \n        return output;\n    }\n};","compare_result":"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"binary-tree-right-side-view"}
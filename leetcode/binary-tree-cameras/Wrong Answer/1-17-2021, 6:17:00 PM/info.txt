{"id":444156900,"lang":"cpp","time":"8Â months","timestamp":1610900220,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/444156900/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    void findParents(TreeNode* root,  unordered_map<TreeNode*, TreeNode*>& parents) {\n        if(!root) return;\n        parents[root->left] = root;\n        parents[root->right] = root;\n        \n        findParents(root->left, parents);\n        findParents(root->right, parents);\n    }\n        \n    int minCameraRecursive(TreeNode* root, unordered_map<TreeNode*, int>& status, unordered_map<TreeNode*, TreeNode*>& parents) {\n        if(!root) return 1;\n        \n        if(status.find(root) != status.end()) return status[root];\n        \n        int l = minCameraRecursive(root->left, status, parents);\n        int r = minCameraRecursive(root->right, status, parents);\n        \n        if(status.find(root) != status.end()) return status[root];\n        \n        if(!root->left || !root-> right) {\n            if(!root->left && !root->right) {\n                return status[root] = 0;    \n            }\n            \n            if(root->left) {\n                if(l == 0) {\n                    status[parents[root]] = 1;\n                    status[root->left] = 1;\n                    status[root->right] = 1;\n                    \n                    return status[root] = 2;\n                }\n\n                if(l == 2) {\n                    return status[root] = 1;\n                }\n            } else {\n                if(r == 0) {\n                    status[parents[root]] = 1;\n                    status[root->left] = 1;\n                    status[root->right] = 1;\n                    \n                    return status[root] = 2;\n                }\n\n                if(r == 2) {\n                    return status[root] = 1;\n                }\n            }\n            \n            return status[root] = 0;\n        }\n        \n        if(l == 0 || r == 0) {\n            status[parents[root]] = 1;\n            status[root->left] = 1;\n            status[root->right] = 1;\n            \n            return status[root] = 2;\n        }\n        \n        if(l == 2 || r == 2) {\n            return status[root] = 1;\n        }\n        \n        return status[root] = 0;\n        \n    }\npublic:\n    int minCameraCover(TreeNode* root) {\n        if(!root) return 0;\n        \n        unordered_map<TreeNode*, int> status; //0 - not lit, 1 - lit, 2 - camera\n        unordered_map<TreeNode*, TreeNode*> parents;\n\n        findParents(root, parents);\n        \n        parents[nullptr] = nullptr;\n        \n        minCameraRecursive(root, status, parents);\n        int count = 0;\n        \n        status[nullptr] = 1;\n        \n        for(auto& a : status) {\n            count += (a.second == 2);\n        }\n        \n        return count + (status[root] == 0 || status[root->left] == 0 || status[root->right] == 0);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111101111111111111001111111111011011111111110111001111111111011010010110011000010001011101011010000000000","title_slug":"binary-tree-cameras"}
{"id":299061791,"lang":"cpp","time":"1Â year, 7Â months","timestamp":1580496350,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/299061791/","is_pending":"Not Pending","title":"Linked List Random Node","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nuint64_t m_state;\n\nclass Solution {\npublic:\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    Solution(ListNode* head) {\n        while(head->next) {\n            numbers.push_back(head->val);\n            head = head->next;\n            ++length;\n        }\n        numbers.push_back(head->val);\n        ++length;\n    }\n    \n    /** Returns a random node's value. */\n    int getRandom() {\n        m_state ^= m_state << 13;\n        m_state ^= m_state >> 17;\n        m_state ^= m_state << 5;\n        return numbers[m_state % length];\n    }\n    \nprivate:\n    size_t length = 0;\n    vector<int> numbers;\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(head);\n * int param_1 = obj->getRandom();\n */","compare_result":"1110001","title_slug":"linked-list-random-node"}
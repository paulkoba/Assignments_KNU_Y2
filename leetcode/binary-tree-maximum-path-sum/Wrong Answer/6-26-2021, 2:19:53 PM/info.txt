{"id":513389932,"lang":"cpp","time":"2 months, 3 weeks","timestamp":1624706393,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/513389932/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<TreeNode*, int> sumsCache;\n    \n    int maxPathSumHelper(TreeNode* root) {\n        if(!root) return 0;\n        if(sumsCache.find(root) != sumsCache.end()) return sumsCache[root];\n        \n        return sumsCache[root] = root->val + max(maxPathSumHelper(root->left), maxPathSumHelper(root->right));\n    }\n    \n    int maxPathSum(TreeNode* root) {\n        if(!root) return 0;\n        \n        int a = max(maxPathSumHelper(root->left), 0);\n        int b = max(maxPathSumHelper(root->right), 0);\n        int c = max(maxPathSum(root->left), maxPathSum(root->right));\n        return max(a + b + root->val, c);\n    }\n};","compare_result":"1111011100111101111111111111111111111111111111111111110111111111111111101111111101111101111111","title_slug":"binary-tree-maximum-path-sum"}
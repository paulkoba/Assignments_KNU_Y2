{"id":500945063,"lang":"cpp","time":"3 months, 3 weeks","timestamp":1622482255,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/500945063/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"7.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    void inorder(TreeNode* root, vector<int>& sol) {\n        if(!root) return;\n        inorder(root->left, sol);\n        sol.push_back(root->val);\n        inorder(root->right, sol);\n    }\n    \npublic:\n    TreeNode* increasingBST(TreeNode* root) {\n        vector<int> solution;\n        inorder(root, solution);\n        \n        TreeNode* output = new TreeNode(solution[0]);\n        TreeNode* memo = output;\n        for(int i = 1; i < solution.size(); ++i) {\n            output->right = new TreeNode(solution[i]);\n            output = output->right;\n        }\n        \n        return memo;\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"increasing-order-search-tree"}
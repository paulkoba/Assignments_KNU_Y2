{"id":457906849,"lang":"cpp","time":"7Â months","timestamp":1613720284,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/457906849/","is_pending":"Not Pending","title":"Longest Common Subsequence","memory":"N/A","code":"struct pair_hash\n{\n    template <class T1, class T2>\n    std::size_t operator() (const std::pair<T1, T2> &pair) const\n    {\n        return std::hash<T1>()(pair.first) ^ std::hash<T2>()(pair.second);\n    }\n};\n\nclass Solution {\npublic:    \n    int lcs(string text1, string text2, int m, int n, unordered_map<pair<int, int>, int, pair_hash>& cache) {\n        if(m == 0 || n == 0) return 0;\n        if(cache.find({m, n}) != cache.end()) return cache[{m, n}];\n        \n        if(text1[m - 1] == text2[n - 1]) return cache[{m - 1, n - 1}] = 1 + lcs(text1, text2, m - 1, n - 1, cache);\n        \n        return max(cache[{m - 1, n}] = lcs(text1, text2, m - 1, n, cache), cache[{m, n - 1}] = lcs(text1, text2, m, n - 1, cache));\n    }\n    \n    int longestCommonSubsequence(string text1, string text2) {\n        unordered_map<pair<int, int>, int, pair_hash> cache;\n        \n        return lcs(text1, text2, text1.size(), text2.size(), cache);\n    }\n};","compare_result":"1111111111111111110110100001100010000000000","title_slug":"longest-common-subsequence"}